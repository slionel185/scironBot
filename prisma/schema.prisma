generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  commandPrefix String    @default("!")
  chatMode      CHAT_MODE @default(NORMAL)
  accounts      Account[]
  commands      Command[]
  sessions      Session[]
}

model Command {
  id               String               @id @default(cuid())
  active           Boolean
  name             String
  userId           String
  createdAt        DateTime             @default(now())
  commandAction    COMMAND_ACTION       @default(REPLY)
  commandReply     String?
  commandUserLevel COMMAND_USER_LEVEL   @default(USER)
  actionType       COMMAND_ACTION_TYPES @default(COMMERCIAL)
  description      String               @default("Oops")
  args             String
  User             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum COMMAND_ACTION {
  REPLY
  ACTION
}

enum COMMAND_USER_LEVEL {
  USER
  MODERATOR
  BROADCASTER
}

enum COMMAND_ACTION_TYPES {
  CHAT
  COMMERCIAL
}

enum CHAT_MODE {
  NORMAL
  SUB_ONLY
  EMOTE_ONLY
  FOLLOWER_ONLY
  SLOW
}
